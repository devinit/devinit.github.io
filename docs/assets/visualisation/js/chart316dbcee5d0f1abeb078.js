(self.webpackChunkdi_website=self.webpackChunkdi_website||[]).push([[8894],{54509:e=>{"use strict";e.exports=function(e,t,o){if(0===e.length)return"";var n,r=[],i=o?3:1;for(n=0;n<e.length;n+=i)r.push(e[n]+","+t[n]),o&&n<e.length-i&&(r.push("C"),r.push([e[n+1]+","+t[n+1],e[n+2]+","+t[n+2]+" "].join(" ")));return r.join(o?"":"L")}},80912:(e,t,o)=>{"use strict";var n=o(34141).isArrayOrTypedArray;e.exports=function(e,t,o){var r;for(n(e)?e.length>t.length&&(e=e.slice(0,t.length)):e=[],r=0;r<t.length;r++)e[r]=o(t[r]);return e}},95221:(e,t,o)=>{"use strict";var n=o(58952),r=o(15451),i=o(85088),s=o(52740).P,l=o(38003),a=o(94867).extendFlat,c=o(59929),u=c.COMPARISON_OPS2,d=c.INTERVAL_OPS,p=o(59904).FORMAT_LINK,h=r.line;e.exports=a({z:n.z,x:n.x,x0:n.x0,dx:n.dx,y:n.y,y0:n.y0,dy:n.dy,text:n.text,hovertext:n.hovertext,transpose:n.transpose,xtype:n.xtype,ytype:n.ytype,zhoverformat:n.zhoverformat,hovertemplate:n.hovertemplate,hoverongaps:n.hoverongaps,connectgaps:a({},n.connectgaps,{description:["Determines whether or not gaps","(i.e. {nan} or missing values)","in the `z` data are filled in.","It is defaulted to true if `z` is a","one dimensional array","otherwise it is defaulted to false."].join(" ")}),fillcolor:{valType:"color",role:"style",editType:"calc",description:["Sets the fill color if `contours.type` is *constraint*.","Defaults to a half-transparent variant of the line color,","marker color, or marker line color, whichever is available."].join(" ")},autocontour:{valType:"boolean",dflt:!0,role:"style",editType:"calc",impliedEdits:{"contours.start":void 0,"contours.end":void 0,"contours.size":void 0},description:["Determines whether or not the contour level attributes are","picked by an algorithm.","If *true*, the number of contour levels can be set in `ncontours`.","If *false*, set the contour level attributes in `contours`."].join(" ")},ncontours:{valType:"integer",dflt:15,min:1,role:"style",editType:"calc",description:["Sets the maximum number of contour levels. The actual number","of contours will be chosen automatically to be less than or","equal to the value of `ncontours`.","Has an effect only if `autocontour` is *true* or if","`contours.size` is missing."].join(" ")},contours:{type:{valType:"enumerated",values:["levels","constraint"],dflt:"levels",role:"info",editType:"calc",description:["If `levels`, the data is represented as a contour plot with multiple","levels displayed. If `constraint`, the data is represented as constraints","with the invalid region shaded as specified by the `operation` and","`value` parameters."].join(" ")},start:{valType:"number",dflt:null,role:"style",editType:"plot",impliedEdits:{"^autocontour":!1},description:["Sets the starting contour level value.","Must be less than `contours.end`"].join(" ")},end:{valType:"number",dflt:null,role:"style",editType:"plot",impliedEdits:{"^autocontour":!1},description:["Sets the end contour level value.","Must be more than `contours.start`"].join(" ")},size:{valType:"number",dflt:null,min:0,role:"style",editType:"plot",impliedEdits:{"^autocontour":!1},description:["Sets the step between each contour level.","Must be positive."].join(" ")},coloring:{valType:"enumerated",values:["fill","heatmap","lines","none"],dflt:"fill",role:"style",editType:"calc",description:["Determines the coloring method showing the contour values.","If *fill*, coloring is done evenly between each contour level","If *heatmap*, a heatmap gradient coloring is applied","between each contour level.","If *lines*, coloring is done on the contour lines.","If *none*, no coloring is applied on this trace."].join(" ")},showlines:{valType:"boolean",dflt:!0,role:"style",editType:"plot",description:["Determines whether or not the contour lines are drawn.","Has an effect only if `contours.coloring` is set to *fill*."].join(" ")},showlabels:{valType:"boolean",dflt:!1,role:"style",editType:"plot",description:["Determines whether to label the contour lines with their values."].join(" ")},labelfont:l({editType:"plot",colorEditType:"style",description:["Sets the font used for labeling the contour levels.","The default color comes from the lines, if shown.","The default family and size come from `layout.font`."].join(" ")}),labelformat:{valType:"string",dflt:"",role:"style",editType:"plot",description:["Sets the contour label formatting rule using d3 formatting","mini-language which is very similar to Python, see:",p].join(" ")},operation:{valType:"enumerated",values:[].concat(u).concat(d),role:"info",dflt:"=",editType:"calc",description:["Sets the constraint operation.","*=* keeps regions equal to `value`","*<* and *<=* keep regions less than `value`","*>* and *>=* keep regions greater than `value`","*[]*, *()*, *[)*, and *(]* keep regions inside `value[0]` to `value[1]`","*][*, *)(*, *](*, *)[* keep regions outside `value[0]` to value[1]`","Open vs. closed intervals make no difference to constraint display, but","all versions are allowed for consistency with filter transforms."].join(" ")},value:{valType:"any",dflt:0,role:"info",editType:"calc",description:["Sets the value or values of the constraint boundary.","When `operation` is set to one of the comparison values","("+u+")","*value* is expected to be a number.","When `operation` is set to one of the interval values","("+d+")","*value* is expected to be an array of two numbers where the first","is the lower bound and the second is the upper bound."].join(" ")},editType:"calc",impliedEdits:{autocontour:!1}},line:{color:a({},h.color,{editType:"style+colorbars",description:["Sets the color of the contour level.","Has no effect if `contours.coloring` is set to *lines*."].join(" ")}),width:{valType:"number",min:0,role:"style",editType:"style+colorbars",description:["Sets the contour line width in (in px)","Defaults to *0.5* when `contours.type` is *levels*.","Defaults to *2* when `contour.type` is *constraint*."].join(" ")},dash:s,smoothing:a({},h.smoothing,{description:["Sets the amount of smoothing for the contour lines,","where *0* corresponds to no smoothing."].join(" ")}),editType:"plot"}},i("",{cLetter:"z",autoColorDflt:!1,editTypeOverride:"calc"}))},17743:(e,t,o)=>{"use strict";var n=o(59430),r=o(60896),i=o(73013);e.exports={min:"zmin",max:"zmax",calc:function(e,t,o){var s=t.contours,l=t.line,a=s.size||1,c=s.coloring,u=r(t,{isColorbar:!0});if("heatmap"===c){var d=n.extractOpts(t);o._fillgradient=d.reversescale?n.flipScale(d.colorscale):d.colorscale,o._zrange=[d.min,d.max]}else"fill"===c&&(o._fillcolor=u);o._line={color:"lines"===c?u:l.color,width:!1!==s.showlines?l.width:0,dash:l.dash},o._levels={start:s.start,end:i(s),size:a}}}},48484:e=>{"use strict";e.exports=function(e,t,o,n){var r=n("contours.start"),i=n("contours.end"),s=!1===r||!1===i,l=o("contours.size");!(s?t.autocontour=!0:o("autocontour",!1))&&l||o("ncontours")}},73013:e=>{"use strict";e.exports=function(e){return e.end+e.size/1e6}},61970:(e,t,o)=>{"use strict";var n=o(34141);e.exports=function(e,t,o,r){if(r||(r={}),e("contours.showlabels")){var i=t.font;n.coerceFont(e,"contours.labelfont",{family:i.family,size:i.size,color:o}),e("contours.labelformat")}!1!==r.hasHover&&e("zhoverformat")}},60896:(e,t,o)=>{"use strict";var n=o(15078),r=o(59430),i=o(73013);e.exports=function(e){var t=e.contours,o=t.start,s=i(t),l=t.size||1,a=Math.floor((s-o)/l)+1,c="lines"===t.coloring?0:1,u=r.extractOpts(e);isFinite(l)||(l=1,a=1);var d,p,h=u.reversescale?r.flipScale(u.colorscale):u.colorscale,f=h.length,v=new Array(f),y=new Array(f);if("heatmap"===t.coloring){var m=u.min,g=u.max;for(p=0;p<f;p++)d=h[p],v[p]=d[0]*(g-m)+m,y[p]=d[1];var b=n.extent([m,g,t.start,t.start+l*(a-1)]),w=b[m<g?0:1],T=b[m<g?1:0];w!==m&&(v.splice(0,0,w),y.splice(0,0,y[0])),T!==g&&(v.push(T),y.push(y[y.length-1]))}else for(p=0;p<f;p++)d=h[p],v[p]=(d[0]*(a+c-1)-c/2)*l+o,y[p]=d[1];return r.makeColorScaleFunc({domain:v,range:y},{noNumericCheck:!0})}},82074:(e,t,o)=>{"use strict";var n=o(34682),r=o(34141);function i(e,t,o){var r={type:"linear",range:[e,t]};return n.autoTicks(r,(t-e)/(o||15)),r}e.exports=function(e,t){var o=e.contours;if(e.autocontour){var s=e.zmin,l=e.zmax;(e.zauto||void 0===s)&&(s=r.aggNums(Math.min,null,t)),(e.zauto||void 0===l)&&(l=r.aggNums(Math.max,null,t));var a=i(s,l,e.ncontours);o.size=a.dtick,o.start=n.tickFirst(a),a.range.reverse(),o.end=n.tickFirst(a),o.start===s&&(o.start+=o.size),o.end===l&&(o.end-=o.size),o.start>o.end&&(o.start=o.end=(o.start+o.end)/2),e._input.contours||(e._input.contours={}),r.extendFlat(e._input.contours,{start:o.start,end:o.end,size:o.size}),e._input.autocontour=!0}else if("constraint"!==o.type){var c,u=o.start,d=o.end,p=e._input.contours;u>d&&(o.start=p.start=d,d=o.end=p.end=u,u=o.start),o.size>0||(c=u===d?1:i(u,d,e.ncontours).dtick,p.size=o.size=c)}}},15694:(e,t,o)=>{"use strict";var n=o(62252),r=o(61970);e.exports=function(e,t,o,i,s){var l,a=o("contours.coloring"),c="";"fill"===a&&(l=o("contours.showlines")),!1!==l&&("lines"!==a&&(c=o("line.color","#000")),o("line.width",.5),o("line.dash")),"none"!==a&&(!0!==e.showlegend&&(t.showlegend=!1),t._dfltShowLegend=!1,n(e,t,i,o,{prefix:"",cLetter:"z"})),o("line.smoothing"),r(o,i,c,s)}}}]);
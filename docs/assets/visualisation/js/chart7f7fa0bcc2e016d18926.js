(self.webpackChunkdi_website=self.webpackChunkdi_website||[]).push([[2551],{8899:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(45266),o=6378137;function a(e){var t=0;if(e&&e.length>0){t+=Math.abs(i(e[0]));for(var r=1;r<e.length;r++)t-=Math.abs(i(e[r]))}return t}function i(e){var t,r,n,a,i,l,u=0,c=e.length;if(c>2){for(l=0;l<c;l++)l===c-2?(n=c-2,a=c-1,i=0):l===c-1?(n=c-1,a=0,i=1):(n=l,a=l+1,i=l+2),t=e[n],r=e[a],u+=(s(e[i][0])-s(t[0]))*Math.sin(s(r[1]));u=u*o*o/2}return u}function s(e){return e*Math.PI/180}t.default=function(e){return n.geomReduce(e,(function(e,t){return e+function(e){var t,r=0;switch(e.type){case"Polygon":return a(e.coordinates);case"MultiPolygon":for(t=0;t<e.coordinates.length;t++)r+=a(e.coordinates[t]);return r;case"Point":case"MultiPoint":case"LineString":case"MultiLineString":return 0}return 0}(t)}),0)}},13292:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(45266);t.default=function(e){var t=[1/0,1/0,-1/0,-1/0];return n.coordEach(e,(function(e){t[0]>e[0]&&(t[0]=e[0]),t[1]>e[1]&&(t[1]=e[1]),t[2]<e[0]&&(t[2]=e[0]),t[3]<e[1]&&(t[3]=e[1])})),t}},93664:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(45266),o=r(97057);t.default=function(e,t){void 0===t&&(t={});var r=0,a=0,i=0;return n.coordEach(e,(function(e){r+=e[0],a+=e[1],i++})),o.point([r/i,a/i],t.properties)}},97057:(e,t)=>{"use strict";function r(e,t,r){void 0===r&&(r={});var n={type:"Feature"};return(0===r.id||r.id)&&(n.id=r.id),r.bbox&&(n.bbox=r.bbox),n.properties=t||{},n.geometry=e,n}function n(e,t,n){return void 0===n&&(n={}),r({type:"Point",coordinates:e},t,n)}function o(e,t,n){void 0===n&&(n={});for(var o=0,a=e;o<a.length;o++){var i=a[o];if(i.length<4)throw new Error("Each LinearRing of a Polygon must have 4 or more Positions.");for(var s=0;s<i[i.length-1].length;s++)if(i[i.length-1][s]!==i[0][s])throw new Error("First and last Position are not equivalent.")}return r({type:"Polygon",coordinates:e},t,n)}function a(e,t,n){if(void 0===n&&(n={}),e.length<2)throw new Error("coordinates must be an array of two or more positions");return r({type:"LineString",coordinates:e},t,n)}function i(e,t){void 0===t&&(t={});var r={type:"FeatureCollection"};return t.id&&(r.id=t.id),t.bbox&&(r.bbox=t.bbox),r.features=e,r}function s(e,t,n){return void 0===n&&(n={}),r({type:"MultiLineString",coordinates:e},t,n)}function l(e,t,n){return void 0===n&&(n={}),r({type:"MultiPoint",coordinates:e},t,n)}function u(e,t,n){return void 0===n&&(n={}),r({type:"MultiPolygon",coordinates:e},t,n)}function c(e,r){void 0===r&&(r="kilometers");var n=t.factors[r];if(!n)throw new Error(r+" units is invalid");return e*n}function d(e,r){void 0===r&&(r="kilometers");var n=t.factors[r];if(!n)throw new Error(r+" units is invalid");return e/n}function g(e){return e%(2*Math.PI)*180/Math.PI}function f(e){return!isNaN(e)&&null!==e&&!Array.isArray(e)&&!/^\s*$/.test(e)}Object.defineProperty(t,"__esModule",{value:!0}),t.earthRadius=6371008.8,t.factors={centimeters:100*t.earthRadius,centimetres:100*t.earthRadius,degrees:t.earthRadius/111325,feet:3.28084*t.earthRadius,inches:39.37*t.earthRadius,kilometers:t.earthRadius/1e3,kilometres:t.earthRadius/1e3,meters:t.earthRadius,metres:t.earthRadius,miles:t.earthRadius/1609.344,millimeters:1e3*t.earthRadius,millimetres:1e3*t.earthRadius,nauticalmiles:t.earthRadius/1852,radians:1,yards:t.earthRadius/1.0936},t.unitsFactors={centimeters:100,centimetres:100,degrees:1/111325,feet:3.28084,inches:39.37,kilometers:.001,kilometres:.001,meters:1,metres:1,miles:1/1609.344,millimeters:1e3,millimetres:1e3,nauticalmiles:1/1852,radians:1/t.earthRadius,yards:1/1.0936},t.areaFactors={acres:247105e-9,centimeters:1e4,centimetres:1e4,feet:10.763910417,inches:1550.003100006,kilometers:1e-6,kilometres:1e-6,meters:1,metres:1,miles:386e-9,millimeters:1e6,millimetres:1e6,yards:1.195990046},t.feature=r,t.geometry=function(e,t,r){switch(void 0===r&&(r={}),e){case"Point":return n(t).geometry;case"LineString":return a(t).geometry;case"Polygon":return o(t).geometry;case"MultiPoint":return l(t).geometry;case"MultiLineString":return s(t).geometry;case"MultiPolygon":return u(t).geometry;default:throw new Error(e+" is invalid")}},t.point=n,t.points=function(e,t,r){return void 0===r&&(r={}),i(e.map((function(e){return n(e,t)})),r)},t.polygon=o,t.polygons=function(e,t,r){return void 0===r&&(r={}),i(e.map((function(e){return o(e,t)})),r)},t.lineString=a,t.lineStrings=function(e,t,r){return void 0===r&&(r={}),i(e.map((function(e){return a(e,t)})),r)},t.featureCollection=i,t.multiLineString=s,t.multiPoint=l,t.multiPolygon=u,t.geometryCollection=function(e,t,n){return void 0===n&&(n={}),r({type:"GeometryCollection",geometries:e},t,n)},t.round=function(e,t){if(void 0===t&&(t=0),t&&!(t>=0))throw new Error("precision must be a positive number");var r=Math.pow(10,t||0);return Math.round(e*r)/r},t.radiansToLength=c,t.lengthToRadians=d,t.lengthToDegrees=function(e,t){return g(d(e,t))},t.bearingToAzimuth=function(e){var t=e%360;return t<0&&(t+=360),t},t.radiansToDegrees=g,t.degreesToRadians=function(e){return e%360*Math.PI/180},t.convertLength=function(e,t,r){if(void 0===t&&(t="kilometers"),void 0===r&&(r="kilometers"),!(e>=0))throw new Error("length must be a positive number");return c(d(e,t),r)},t.convertArea=function(e,r,n){if(void 0===r&&(r="meters"),void 0===n&&(n="kilometers"),!(e>=0))throw new Error("area must be a positive number");var o=t.areaFactors[r];if(!o)throw new Error("invalid original units");var a=t.areaFactors[n];if(!a)throw new Error("invalid final units");return e/o*a},t.isNumber=f,t.isObject=function(e){return!!e&&e.constructor===Object},t.validateBBox=function(e){if(!e)throw new Error("bbox is required");if(!Array.isArray(e))throw new Error("bbox must be an Array");if(4!==e.length&&6!==e.length)throw new Error("bbox must be an Array of 4 or 6 numbers");e.forEach((function(e){if(!f(e))throw new Error("bbox must only contain numbers")}))},t.validateId=function(e){if(!e)throw new Error("id is required");if(-1===["string","number"].indexOf(typeof e))throw new Error("id must be a number or a string")},t.radians2degrees=function(){throw new Error("method has been renamed to `radiansToDegrees`")},t.degrees2radians=function(){throw new Error("method has been renamed to `degreesToRadians`")},t.distanceToDegrees=function(){throw new Error("method has been renamed to `lengthToDegrees`")},t.distanceToRadians=function(){throw new Error("method has been renamed to `lengthToRadians`")},t.radiansToDistance=function(){throw new Error("method has been renamed to `radiansToLength`")},t.bearingToAngle=function(){throw new Error("method has been renamed to `bearingToAzimuth`")},t.convertDistance=function(){throw new Error("method has been renamed to `convertLength`")}},45266:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(97057);function o(e,t,r){if(null!==e)for(var n,a,i,s,l,u,c,d,g=0,f=0,h=e.type,m="FeatureCollection"===h,p="Feature"===h,b=m?e.features.length:1,y=0;y<b;y++){l=(d=!!(c=m?e.features[y].geometry:p?e.geometry:e)&&"GeometryCollection"===c.type)?c.geometries.length:1;for(var v=0;v<l;v++){var w=0,M=0;if(null!==(s=d?c.geometries[v]:c)){u=s.coordinates;var S=s.type;switch(g=!r||"Polygon"!==S&&"MultiPolygon"!==S?0:1,S){case null:break;case"Point":if(!1===t(u,f,y,w,M))return!1;f++,w++;break;case"LineString":case"MultiPoint":for(n=0;n<u.length;n++){if(!1===t(u[n],f,y,w,M))return!1;f++,"MultiPoint"===S&&w++}"LineString"===S&&w++;break;case"Polygon":case"MultiLineString":for(n=0;n<u.length;n++){for(a=0;a<u[n].length-g;a++){if(!1===t(u[n][a],f,y,w,M))return!1;f++}"MultiLineString"===S&&w++,"Polygon"===S&&M++}"Polygon"===S&&w++;break;case"MultiPolygon":for(n=0;n<u.length;n++){for(M=0,a=0;a<u[n].length;a++){for(i=0;i<u[n][a].length-g;i++){if(!1===t(u[n][a][i],f,y,w,M))return!1;f++}M++}w++}break;case"GeometryCollection":for(n=0;n<s.geometries.length;n++)if(!1===o(s.geometries[n],t,r))return!1;break;default:throw new Error("Unknown Geometry Type")}}}}}function a(e,t){var r;switch(e.type){case"FeatureCollection":for(r=0;r<e.features.length&&!1!==t(e.features[r].properties,r);r++);break;case"Feature":t(e.properties,0)}}function i(e,t){if("Feature"===e.type)t(e,0);else if("FeatureCollection"===e.type)for(var r=0;r<e.features.length&&!1!==t(e.features[r],r);r++);}function s(e,t){var r,n,o,a,i,s,l,u,c,d,g=0,f="FeatureCollection"===e.type,h="Feature"===e.type,m=f?e.features.length:1;for(r=0;r<m;r++){for(s=f?e.features[r].geometry:h?e.geometry:e,u=f?e.features[r].properties:h?e.properties:{},c=f?e.features[r].bbox:h?e.bbox:void 0,d=f?e.features[r].id:h?e.id:void 0,i=(l=!!s&&"GeometryCollection"===s.type)?s.geometries.length:1,o=0;o<i;o++)if(null!==(a=l?s.geometries[o]:s))switch(a.type){case"Point":case"LineString":case"MultiPoint":case"Polygon":case"MultiLineString":case"MultiPolygon":if(!1===t(a,g,u,c,d))return!1;break;case"GeometryCollection":for(n=0;n<a.geometries.length;n++)if(!1===t(a.geometries[n],g,u,c,d))return!1;break;default:throw new Error("Unknown Geometry Type")}else if(!1===t(null,g,u,c,d))return!1;g++}}function l(e,t){s(e,(function(e,r,o,a,i){var s,l=null===e?null:e.type;switch(l){case null:case"Point":case"LineString":case"Polygon":return!1!==t(n.feature(e,o,{bbox:a,id:i}),r,0)&&void 0}switch(l){case"MultiPoint":s="Point";break;case"MultiLineString":s="LineString";break;case"MultiPolygon":s="Polygon"}for(var u=0;u<e.coordinates.length;u++){var c={type:s,coordinates:e.coordinates[u]};if(!1===t(n.feature(c,o),r,u))return!1}}))}function u(e,t){l(e,(function(e,r,a){var i=0;if(e.geometry){var s=e.geometry.type;if("Point"!==s&&"MultiPoint"!==s){var l,u=0,c=0,d=0;return!1!==o(e,(function(o,s,g,f,h){if(void 0===l||r>u||f>c||h>d)return l=o,u=r,c=f,d=h,void(i=0);var m=n.lineString([l,o],e.properties);if(!1===t(m,r,a,h,i))return!1;i++,l=o}))&&void 0}}}))}function c(e,t){if(!e)throw new Error("geojson is required");l(e,(function(e,r,o){if(null!==e.geometry){var a=e.geometry.type,i=e.geometry.coordinates;switch(a){case"LineString":if(!1===t(e,r,o,0,0))return!1;break;case"Polygon":for(var s=0;s<i.length;s++)if(!1===t(n.lineString(i[s],e.properties),r,o,s))return!1}}}))}t.coordEach=o,t.coordReduce=function(e,t,r,n){var a=r;return o(e,(function(e,n,o,i,s){a=0===n&&void 0===r?e:t(a,e,n,o,i,s)}),n),a},t.propEach=a,t.propReduce=function(e,t,r){var n=r;return a(e,(function(e,o){n=0===o&&void 0===r?e:t(n,e,o)})),n},t.featureEach=i,t.featureReduce=function(e,t,r){var n=r;return i(e,(function(e,o){n=0===o&&void 0===r?e:t(n,e,o)})),n},t.coordAll=function(e){var t=[];return o(e,(function(e){t.push(e)})),t},t.geomEach=s,t.geomReduce=function(e,t,r){var n=r;return s(e,(function(e,o,a,i,s){n=0===o&&void 0===r?e:t(n,e,o,a,i,s)})),n},t.flattenEach=l,t.flattenReduce=function(e,t,r){var n=r;return l(e,(function(e,o,a){n=0===o&&0===a&&void 0===r?e:t(n,e,o,a)})),n},t.segmentEach=u,t.segmentReduce=function(e,t,r){var n=r,o=!1;return u(e,(function(e,a,i,s,l){n=!1===o&&void 0===r?e:t(n,e,a,i,s,l),o=!0})),n},t.lineEach=c,t.lineReduce=function(e,t,r){var n=r;return c(e,(function(e,o,a,i){n=0===o&&void 0===r?e:t(n,e,o,a,i)})),n},t.findSegment=function(e,t){if(t=t||{},!n.isObject(t))throw new Error("options is invalid");var r,o=t.featureIndex||0,a=t.multiFeatureIndex||0,i=t.geometryIndex||0,s=t.segmentIndex||0,l=t.properties;switch(e.type){case"FeatureCollection":o<0&&(o=e.features.length+o),l=l||e.features[o].properties,r=e.features[o].geometry;break;case"Feature":l=l||e.properties,r=e.geometry;break;case"Point":case"MultiPoint":return null;case"LineString":case"Polygon":case"MultiLineString":case"MultiPolygon":r=e;break;default:throw new Error("geojson is invalid")}if(null===r)return null;var u=r.coordinates;switch(r.type){case"Point":case"MultiPoint":return null;case"LineString":return s<0&&(s=u.length+s-1),n.lineString([u[s],u[s+1]],l,t);case"Polygon":return i<0&&(i=u.length+i),s<0&&(s=u[i].length+s-1),n.lineString([u[i][s],u[i][s+1]],l,t);case"MultiLineString":return a<0&&(a=u.length+a),s<0&&(s=u[a].length+s-1),n.lineString([u[a][s],u[a][s+1]],l,t);case"MultiPolygon":return a<0&&(a=u.length+a),i<0&&(i=u[a].length+i),s<0&&(s=u[a][i].length-s-1),n.lineString([u[a][i][s],u[a][i][s+1]],l,t)}throw new Error("geojson is invalid")},t.findPoint=function(e,t){if(t=t||{},!n.isObject(t))throw new Error("options is invalid");var r,o=t.featureIndex||0,a=t.multiFeatureIndex||0,i=t.geometryIndex||0,s=t.coordIndex||0,l=t.properties;switch(e.type){case"FeatureCollection":o<0&&(o=e.features.length+o),l=l||e.features[o].properties,r=e.features[o].geometry;break;case"Feature":l=l||e.properties,r=e.geometry;break;case"Point":case"MultiPoint":return null;case"LineString":case"Polygon":case"MultiLineString":case"MultiPolygon":r=e;break;default:throw new Error("geojson is invalid")}if(null===r)return null;var u=r.coordinates;switch(r.type){case"Point":return n.point(u,l,t);case"MultiPoint":return a<0&&(a=u.length+a),n.point(u[a],l,t);case"LineString":return s<0&&(s=u.length+s),n.point(u[s],l,t);case"Polygon":return i<0&&(i=u.length+i),s<0&&(s=u[i].length+s),n.point(u[i][s],l,t);case"MultiLineString":return a<0&&(a=u.length+a),s<0&&(s=u[a].length+s),n.point(u[a][s],l,t);case"MultiPolygon":return a<0&&(a=u.length+a),i<0&&(i=u[a].length+i),s<0&&(s=u[a][i].length-s),n.point(u[a][i][s],l,t)}throw new Error("geojson is invalid")}},22051:e=>{e.exports={AFG:"afghan",ALA:"\\b\\wland",ALB:"albania",DZA:"algeria",ASM:"^(?=.*americ).*samoa",AND:"andorra",AGO:"angola",AIA:"anguill?a",ATA:"antarctica",ATG:"antigua",ARG:"argentin",ARM:"armenia",ABW:"^(?!.*bonaire).*\\baruba",AUS:"australia",AUT:"^(?!.*hungary).*austria|\\baustri.*\\bemp",AZE:"azerbaijan",BHS:"bahamas",BHR:"bahrain",BGD:"bangladesh|^(?=.*east).*paki?stan",BRB:"barbados",BLR:"belarus|byelo",BEL:"^(?!.*luxem).*belgium",BLZ:"belize|^(?=.*british).*honduras",BEN:"benin|dahome",BMU:"bermuda",BTN:"bhutan",BOL:"bolivia",BES:"^(?=.*bonaire).*eustatius|^(?=.*carib).*netherlands|\\bbes.?islands",BIH:"herzegovina|bosnia",BWA:"botswana|bechuana",BVT:"bouvet",BRA:"brazil",IOT:"british.?indian.?ocean",BRN:"brunei",BGR:"bulgaria",BFA:"burkina|\\bfaso|upper.?volta",BDI:"burundi",CPV:"verde",KHM:"cambodia|kampuchea|khmer",CMR:"cameroon",CAN:"canada",CYM:"cayman",CAF:"\\bcentral.african.republic",TCD:"\\bchad",CHL:"\\bchile",CHN:"^(?!.*\\bmac)(?!.*\\bhong)(?!.*\\btai)(?!.*\\brep).*china|^(?=.*peo)(?=.*rep).*china",CXR:"christmas",CCK:"\\bcocos|keeling",COL:"colombia",COM:"comoro",COG:"^(?!.*\\bdem)(?!.*\\bd[\\.]?r)(?!.*kinshasa)(?!.*zaire)(?!.*belg)(?!.*l.opoldville)(?!.*free).*\\bcongo",COK:"\\bcook",CRI:"costa.?rica",CIV:"ivoire|ivory",HRV:"croatia",CUB:"\\bcuba",CUW:"^(?!.*bonaire).*\\bcura(c|ç)ao",CYP:"cyprus",CSK:"czechoslovakia",CZE:"^(?=.*rep).*czech|czechia|bohemia",COD:"\\bdem.*congo|congo.*\\bdem|congo.*\\bd[\\.]?r|\\bd[\\.]?r.*congo|belgian.?congo|congo.?free.?state|kinshasa|zaire|l.opoldville|drc|droc|rdc",DNK:"denmark",DJI:"djibouti",DMA:"dominica(?!n)",DOM:"dominican.rep",ECU:"ecuador",EGY:"egypt",SLV:"el.?salvador",GNQ:"guine.*eq|eq.*guine|^(?=.*span).*guinea",ERI:"eritrea",EST:"estonia",ETH:"ethiopia|abyssinia",FLK:"falkland|malvinas",FRO:"faroe|faeroe",FJI:"fiji",FIN:"finland",FRA:"^(?!.*\\bdep)(?!.*martinique).*france|french.?republic|\\bgaul",GUF:"^(?=.*french).*guiana",PYF:"french.?polynesia|tahiti",ATF:"french.?southern",GAB:"gabon",GMB:"gambia",GEO:"^(?!.*south).*georgia",DDR:"german.?democratic.?republic|democratic.?republic.*germany|east.germany",DEU:"^(?!.*east).*germany|^(?=.*\\bfed.*\\brep).*german",GHA:"ghana|gold.?coast",GIB:"gibraltar",GRC:"greece|hellenic|hellas",GRL:"greenland",GRD:"grenada",GLP:"guadeloupe",GUM:"\\bguam",GTM:"guatemala",GGY:"guernsey",GIN:"^(?!.*eq)(?!.*span)(?!.*bissau)(?!.*portu)(?!.*new).*guinea",GNB:"bissau|^(?=.*portu).*guinea",GUY:"guyana|british.?guiana",HTI:"haiti",HMD:"heard.*mcdonald",VAT:"holy.?see|vatican|papal.?st",HND:"^(?!.*brit).*honduras",HKG:"hong.?kong",HUN:"^(?!.*austr).*hungary",ISL:"iceland",IND:"india(?!.*ocea)",IDN:"indonesia",IRN:"\\biran|persia",IRQ:"\\biraq|mesopotamia",IRL:"(^ireland)|(^republic.*ireland)",IMN:"^(?=.*isle).*\\bman",ISR:"israel",ITA:"italy",JAM:"jamaica",JPN:"japan",JEY:"jersey",JOR:"jordan",KAZ:"kazak",KEN:"kenya|british.?east.?africa|east.?africa.?prot",KIR:"kiribati",PRK:"^(?=.*democrat|people|north|d.*p.*.r).*\\bkorea|dprk|korea.*(d.*p.*r)",KWT:"kuwait",KGZ:"kyrgyz|kirghiz",LAO:"\\blaos?\\b",LVA:"latvia",LBN:"lebanon",LSO:"lesotho|basuto",LBR:"liberia",LBY:"libya",LIE:"liechtenstein",LTU:"lithuania",LUX:"^(?!.*belg).*luxem",MAC:"maca(o|u)",MDG:"madagascar|malagasy",MWI:"malawi|nyasa",MYS:"malaysia",MDV:"maldive",MLI:"\\bmali\\b",MLT:"\\bmalta",MHL:"marshall",MTQ:"martinique",MRT:"mauritania",MUS:"mauritius",MYT:"\\bmayotte",MEX:"\\bmexic",FSM:"fed.*micronesia|micronesia.*fed",MCO:"monaco",MNG:"mongolia",MNE:"^(?!.*serbia).*montenegro",MSR:"montserrat",MAR:"morocco|\\bmaroc",MOZ:"mozambique",MMR:"myanmar|burma",NAM:"namibia",NRU:"nauru",NPL:"nepal",NLD:"^(?!.*\\bant)(?!.*\\bcarib).*netherlands",ANT:"^(?=.*\\bant).*(nether|dutch)",NCL:"new.?caledonia",NZL:"new.?zealand",NIC:"nicaragua",NER:"\\bniger(?!ia)",NGA:"nigeria",NIU:"niue",NFK:"norfolk",MNP:"mariana",NOR:"norway",OMN:"\\boman|trucial",PAK:"^(?!.*east).*paki?stan",PLW:"palau",PSE:"palestin|\\bgaza|west.?bank",PAN:"panama",PNG:"papua|new.?guinea",PRY:"paraguay",PER:"peru",PHL:"philippines",PCN:"pitcairn",POL:"poland",PRT:"portugal",PRI:"puerto.?rico",QAT:"qatar",KOR:"^(?!.*d.*p.*r)(?!.*democrat)(?!.*people)(?!.*north).*\\bkorea(?!.*d.*p.*r)",MDA:"moldov|b(a|e)ssarabia",REU:"r(e|é)union",ROU:"r(o|u|ou)mania",RUS:"\\brussia|soviet.?union|u\\.?s\\.?s\\.?r|socialist.?republics",RWA:"rwanda",BLM:"barth(e|é)lemy",SHN:"helena",KNA:"kitts|\\bnevis",LCA:"\\blucia",MAF:"^(?=.*collectivity).*martin|^(?=.*france).*martin(?!ique)|^(?=.*french).*martin(?!ique)",SPM:"miquelon",VCT:"vincent",WSM:"^(?!.*amer).*samoa",SMR:"san.?marino",STP:"\\bs(a|ã)o.?tom(e|é)",SAU:"\\bsa\\w*.?arabia",SEN:"senegal",SRB:"^(?!.*monte).*serbia",SYC:"seychell",SLE:"sierra",SGP:"singapore",SXM:"^(?!.*martin)(?!.*saba).*maarten",SVK:"^(?!.*cze).*slovak",SVN:"slovenia",SLB:"solomon",SOM:"somali",ZAF:"south.africa|s\\\\..?africa",SGS:"south.?georgia|sandwich",SSD:"\\bs\\w*.?sudan",ESP:"spain",LKA:"sri.?lanka|ceylon",SDN:"^(?!.*\\bs(?!u)).*sudan",SUR:"surinam|dutch.?guiana",SJM:"svalbard",SWZ:"swaziland",SWE:"sweden",CHE:"switz|swiss",SYR:"syria",TWN:"taiwan|taipei|formosa|^(?!.*peo)(?=.*rep).*china",TJK:"tajik",THA:"thailand|\\bsiam",MKD:"macedonia|fyrom",TLS:"^(?=.*leste).*timor|^(?=.*east).*timor",TGO:"togo",TKL:"tokelau",TON:"tonga",TTO:"trinidad|tobago",TUN:"tunisia",TUR:"turkey",TKM:"turkmen",TCA:"turks",TUV:"tuvalu",UGA:"uganda",UKR:"ukrain",ARE:"emirates|^u\\.?a\\.?e\\.?$|united.?arab.?em",GBR:"united.?kingdom|britain|^u\\.?k\\.?$",TZA:"tanzania",USA:"united.?states\\b(?!.*islands)|\\bu\\.?s\\.?a\\.?\\b|^\\s*u\\.?s\\.?\\b(?!.*islands)",UMI:"minor.?outlying.?is",URY:"uruguay",UZB:"uzbek",VUT:"vanuatu|new.?hebrides",VEN:"venezuela",VNM:"^(?!.*republic).*viet.?nam|^(?=.*socialist).*viet.?nam",VGB:"^(?=.*\\bu\\.?\\s?k).*virgin|^(?=.*brit).*virgin|^(?=.*kingdom).*virgin",VIR:"^(?=.*\\bu\\.?\\s?s).*virgin|^(?=.*states).*virgin",WLF:"futuna|wallis",ESH:"western.sahara",YEM:"^(?!.*arab)(?!.*north)(?!.*sana)(?!.*peo)(?!.*dem)(?!.*south)(?!.*aden)(?!.*\\bp\\.?d\\.?r).*yemen",YMD:"^(?=.*peo).*yemen|^(?!.*rep)(?=.*dem).*yemen|^(?=.*south).*yemen|^(?=.*aden).*yemen|^(?=.*\\bp\\.?d\\.?r).*yemen",YUG:"yugoslavia",ZMB:"zambia|northern.?rhodesia",EAZ:"zanzibar",ZWE:"zimbabwe|^(?!.*northern).*rhodesia"}},94187:(e,t,r)=>{"use strict";var n=r(15078),o=r(22051),a=r(8899),i=r(93664),s=r(13292),l=r(95170),u=r(51171),c=r(52970),d=r(19612),g=r(78879),f=Object.keys(o),h={"ISO-3":l,"USA-states":l,"country names":function(e){for(var t=0;t<f.length;t++){var r=f[t];if(new RegExp(o[r]).test(e.trim().toLowerCase()))return r}return u.log("Unrecognized country name: "+e+"."),!1}};function m(e){var t=e.geojson,r=window.PlotlyGeoAssets||{},n="string"==typeof t?r[t]:t;return c(n)?n:(u.error("Oops ... something went wrong when fetching "+t),!1)}e.exports={locationToFeature:function(e,t,r){if(!t||"string"!=typeof t)return!1;var n,o,a,i=h[e](t);if(i){if("USA-states"===e)for(n=[],a=0;a<r.length;a++)(o=r[a]).properties&&o.properties.gu&&"USA"===o.properties.gu&&n.push(o);else n=r;for(a=0;a<n.length;a++)if((o=n[a]).id===i)return o;u.log(["Location with id",i,"does not have a matching topojson feature at this resolution."].join(" "))}return!1},feature2polygons:function(e){var t,r,n,o,a=e.geometry,i=a.coordinates,s=e.id,l=[];function u(e){for(var t=0;t<e.length-1;t++)if(e[t][0]>0&&e[t+1][0]<0)return t;return null}switch(t="RUS"===s||"FJI"===s?function(e){var t;if(null===u(e))t=e;else for(t=new Array(e.length),o=0;o<e.length;o++)t[o]=[e[o][0]<0?e[o][0]+360:e[o][0],e[o][1]];l.push(g.tester(t))}:"ATA"===s?function(e){var t=u(e);if(null===t)return l.push(g.tester(e));var r=new Array(e.length+1),n=0;for(o=0;o<e.length;o++)o>t?r[n++]=[e[o][0]+360,e[o][1]]:o===t?(r[n++]=e[o],r[n++]=[e[o][0],-90]):r[n++]=e[o];var a=g.tester(r);a.pts.pop(),l.push(a)}:function(e){l.push(g.tester(e))},a.type){case"MultiPolygon":for(r=0;r<i.length;r++)for(n=0;n<i[r].length;n++)t(i[r][n]);break;case"Polygon":for(r=0;r<i.length;r++)t(i[r])}return l},getTraceGeojson:m,extractTraceFeature:function(e){var t=e[0].trace,r=m(t);if(!r)return!1;var n,o={},s=[];for(n=0;n<t._length;n++){var l=e[n];(l.loc||0===l.loc)&&(o[l.loc]=l)}function c(e){var r=d(e,t.featureidkey||"id").get(),n=o[r];if(n){var l=e.geometry;if("Polygon"===l.type||"MultiPolygon"===l.type){var c={type:"Feature",id:r,geometry:l,properties:{}};c.properties.ct=function(e){var t,r=e.geometry;if("MultiPolygon"===r.type)for(var n=r.coordinates,o=0,s=0;s<n.length;s++){var l={type:"Polygon",coordinates:n[s]},u=a.default(l);u>o&&(o=u,t=l)}else t=r;return i.default(t).geometry.coordinates}(c),n.fIn=e,n.fOut=c,s.push(c)}else u.log(["Location",n.loc,"does not have a valid GeoJSON geometry.","Traces with locationmode *geojson-id* only support","*Polygon* and *MultiPolygon* geometries."].join(" "))}delete o[r]}switch(r.type){case"FeatureCollection":var g=r.features;for(n=0;n<g.length;n++)c(g[n]);break;case"Feature":c(r);break;default:return u.warn(["Invalid GeoJSON type",(r.type||"none")+".","Traces with locationmode *geojson-id* only support","*FeatureCollection* and *Feature* types."].join(" ")),!1}for(var f in o)u.log(["Location *"+f+"*","does not have a matching feature with id-key","*"+t.featureidkey+"*."].join(" "));return s},fetchTraceGeoData:function(e){var t=window.PlotlyGeoAssets||{},r=[];function o(e){return new Promise((function(r,o){n.json(e,(function(n,a){if(n){delete t[e];var i=404===n.status?'GeoJSON at URL "'+e+'" does not exist.':"Unexpected error while fetching from "+e;return o(new Error(i))}return t[e]=a,r(a)}))}))}function a(e){return new Promise((function(r,n){var o=0,a=setInterval((function(){return t[e]&&"pending"!==t[e]?(clearInterval(a),r(t[e])):o>100?(clearInterval(a),n("Unexpected error while fetching from "+e)):void o++}),50)}))}for(var i=0;i<e.length;i++){var s=e[i][0].trace.geojson;"string"==typeof s&&(t[s]?"pending"===t[s]&&r.push(a(s)):(t[s]="pending",r.push(o(s))))}return r},computeBbox:function(e){return s.default(e)}}},15845:(e,t,r)=>{"use strict";var n=r(88176).f,o=r(88176).s,a=r(15451),i=r(85485),s=r(85088),l=r(52740).P,u=r(94867).extendFlat,c=r(15716).overrideAll,d=a.marker,g=a.line,f=d.line;e.exports=c({lon:{valType:"data_array",description:"Sets the longitude coordinates (in degrees East)."},lat:{valType:"data_array",description:"Sets the latitude coordinates (in degrees North)."},locations:{valType:"data_array",description:["Sets the coordinates via location IDs or names.","Coordinates correspond to the centroid of each location given.","See `locationmode` for more info."].join(" ")},locationmode:{valType:"enumerated",values:["ISO-3","USA-states","country names","geojson-id"],role:"info",dflt:"ISO-3",description:["Determines the set of locations used to match entries in `locations`","to regions on the map.","Values *ISO-3*, *USA-states*, *country names* correspond to features on","the base map and value *geojson-id* corresponds to features from a custom","GeoJSON linked to the `geojson` attribute."].join(" ")},geojson:{valType:"any",role:"info",editType:"calc",description:["Sets optional GeoJSON data associated with this trace.","If not given, the features on the base map are used when `locations` is set.","It can be set as a valid GeoJSON object or as a URL string.","Note that we only accept GeoJSONs of type *FeatureCollection* or *Feature*","with geometries of type *Polygon* or *MultiPolygon*."].join(" ")},featureidkey:{valType:"string",role:"info",editType:"calc",dflt:"id",description:["Sets the key in GeoJSON features which is used as id to match the items","included in the `locations` array.","Only has an effect when `geojson` is set.","Support nested property, for example *properties.name*."].join(" ")},mode:u({},a.mode,{dflt:"markers"}),text:u({},a.text,{description:["Sets text elements associated with each (lon,lat) pair","or item in `locations`.","If a single string, the same string appears over","all the data points.","If an array of string, the items are mapped in order to the","this trace's (lon,lat) or `locations` coordinates.","If trace `hoverinfo` contains a *text* flag and *hovertext* is not set,","these elements will be seen in the hover labels."].join(" ")}),texttemplate:o({editType:"plot"},{keys:["lat","lon","location","text"]}),hovertext:u({},a.hovertext,{description:["Sets hover text elements associated with each (lon,lat) pair","or item in `locations`.","If a single string, the same string appears over","all the data points.","If an array of string, the items are mapped in order to the","this trace's (lon,lat) or `locations` coordinates.","To be seen, trace `hoverinfo` must contain a *text* flag."].join(" ")}),textfont:a.textfont,textposition:a.textposition,line:{color:g.color,width:g.width,dash:l},connectgaps:a.connectgaps,marker:u({symbol:d.symbol,opacity:d.opacity,size:d.size,sizeref:d.sizeref,sizemin:d.sizemin,sizemode:d.sizemode,colorbar:d.colorbar,line:u({width:f.width},s("marker.line")),gradient:d.gradient},s("marker")),fill:{valType:"enumerated",values:["none","toself"],dflt:"none",role:"style",description:["Sets the area to fill with a solid color.","Use with `fillcolor` if not *none*.","*toself* connects the endpoints of the trace (or each segment","of the trace if it has gaps) into a closed shape."].join(" ")},fillcolor:a.fillcolor,selected:a.selected,unselected:a.unselected,hoverinfo:u({},i.hoverinfo,{flags:["lon","lat","location","text","name"]}),hovertemplate:n()},"calc","nested")}}]);